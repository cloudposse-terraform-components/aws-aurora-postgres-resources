name: "aws-aurora-postgres-resources"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-aurora-postgres-resources"
# Short description of this project
description: |-
  This component is responsible for provisioning Aurora Postgres resources: additional databases, users, permissions,
  grants, etc.

  ## PostgreSQL Quick Reference on Grants

  GRANTS can be on database, schema, role, table, and other database objects (e.g. columns in a table for fine control).
  Database and schema do not have much to grant. The `object_type` field in the input determines which kind of object the
  grant is being applied to. The `db` field is always required. The `schema` field is required unless the `object_type` is
  `db`, in which case it should be set to the empty string (`""`).

  The keyword PUBLIC indicates that the privileges are to be granted to all roles, including those that might be created
  later. PUBLIC can be thought of as an implicitly defined group that always includes all roles. Any particular role will
  have the sum of privileges granted directly to it, privileges granted to any role it is presently a member of, and
  privileges granted to PUBLIC.

  When an object is created, it is assigned an owner. The owner is normally the role that executed the creation statement.
  For most kinds of objects, the initial state is that only the owner (or a superuser) can do anything with the object. To
  allow other roles to use it, privileges must be granted. (When using AWS managed RDS, you cannot have access to any
  superuser roles; superuser is reserved for AWS to use to manage the cluster.)

  PostgreSQL grants privileges on some types of objects to PUBLIC by default when the objects are created. No privileges
  are granted to PUBLIC by default on tables, table columns, sequences, foreign data wrappers, foreign servers, large
  objects, schemas, or tablespaces. For other types of objects, the default privileges granted to PUBLIC are as follows:
  CONNECT and TEMPORARY (create temporary tables) privileges for databases; EXECUTE privilege for functions and
  procedures; and USAGE privilege for languages and data types (including domains). The object owner can, of course,
  REVOKE both default and expressly granted privileges. (For maximum security, issue the REVOKE in the same transaction
  that creates the object; then there is no window in which another user can use the object.) Also, these default
  privilege settings can be overridden using the ALTER DEFAULT PRIVILEGES command.

  The CREATE privilege:

  - For databases, allows new schemas and publications to be created within the database, and allows trusted extensions to
    be installed within the database.
  - For schemas, allows new objects to be created within the schema. To rename an existing object, you must own the object
    and have this privilege for the containing schema.

  For databases and schemas, there are not a lot of other privileges to grant, and all but CREATE are granted by default,
  so you might as well grant "ALL". For tables etc., the creator has full control. You grant access to other users via
  explicit grants. This component does not allow fine-grained grants. You have to specify the database, and unless the
  grant is on the database, you have to specify the schema. For any other object type (table, sequence, function,
  procedure, routine, foreign_data_wrapper, foreign_server, column), the component applies the grants to all objects of
  that type in the specified schema.

  <!-- prettier-ignore-start -->
  <!-- prettier-ignore-end -->
usage: |-
  **Stack Level**: Regional

  Here's an example snippet for how to use this component.

  ```yaml
  components:
    terraform:
      aurora-postgres-resources:
        vars:
          aurora_postgres_component_name: aurora-postgres-example
          additional_users:
            example:
              db_user: example
              db_password: ""
              grants:
                - grant: ["ALL"]
                  db: example
                  object_type: database
                  schema: ""
  ```
references:
  - name: "cloudposse-terraform-components"
    description: "Cloud Posse's upstream component"
    url: "https://github.com/orgs/cloudposse-terraform-components/repositories"
  - name: "GRANT command"
    description: ""
    url: "https://www.postgresql.org/docs/14/sql-grant.html"
  - name: "Privileges that can be GRANTed"
    description: ""
    url: "https://www.postgresql.org/docs/14/ddl-priv.html"
tags:
  - component/aurora-postgres-resources
  - layer/data
  - provider/aws
# Categories of this project
categories:
  - component/aurora-postgres-resources
  - layer/data
  - provider/aws
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-aurora-postgres-resources.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-aurora-postgres-resources/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
